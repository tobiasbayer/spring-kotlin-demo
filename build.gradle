buildscript {
    ext {
        kotlinVersion = '1.3.11'
    }
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.21"
    id "org.jetbrains.kotlin.kapt" version "1.3.21"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.3.21"
    id "com.github.johnrengelman.shadow" version "4.0.2"
    id "application"
}

configurations {
    developmentOnly
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile('com.fasterxml.jackson.module:jackson-module-kotlin:2.9.8')
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    compile("org.jetbrains.kotlin:kotlin-reflect")
    compile("io.micronaut:micronaut-http-client:1.1.1")
    compile("io.micronaut:micronaut-runtime:1.1.1")
    compile("io.micronaut:micronaut-router:1.1.1")
    compile("io.micronaut:micronaut-function:1.1.1")
    compile("io.micronaut:micronaut-security:1.1.1")
    compile("io.micronaut:micronaut-validation:1.1.1")
    compile("io.micronaut:micronaut-management:1.1.4")
    compile("io.micronaut.configuration:micronaut-mongo-reactive:1.1.0")
    compile("io.micronaut.aws:micronaut-function-aws-api-proxy:1.1.1")
    compile("org.slf4j:slf4j-simple:1.8+")
    compile("org.litote.kmongo:kmongo:3.10.2")
    compile("io.micronaut:micronaut-http-server-netty:1.1.1")

    kapt("io.micronaut:micronaut-inject-java:1.1.1")
    kapt("io.micronaut:micronaut-validation:1.1.1")
}

run.classpath += configurations.developmentOnly

mainClassName = "com.example.disruptiveguestbook.DisruptiveGuestbookApplicationKt"

shadowJar {
    mergeServiceFiles()
}

task buildZip(type: Zip) {
    from sourceSets.main.output
    into("lib") {
        from configurations.compileClasspath
        from configurations.runtimeClasspath
    }
}

shadowJar.dependsOn buildZip

